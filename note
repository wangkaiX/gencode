grpc:
   api.go  grpc.proto  init_grpc.go  main.go  proto.mak  service_define.go  test.go 

rest:
    enum.mako  func.mako  gin_file.go  router.mako  run.mako  test.mako define.mako

graphql
    define.mako  enum.mako  graphql_resolver.mako  resolver.go  resolver.mako  run.mako  schema_go.mako  schema.mako  test.mako  func.mako

---------------------------------------------------------------------------------------------------------
grpc:

rest:

graphql


common:
    api.go  grpc.proto  init_grpc  proto.mak service_define.go  test.go enum.mako  router.mako  init_rest.go  init_graphql.go   define.go
    schema_go.mako schema.graphql  resolver_define.go   resolver.go  main.go
    
    test merge

支持docker方式生成，用户不用安装很多三方依赖
代码框架可高度配置
根据接口描述文档，生成代码框架，测试用例，自动化测试流程
生成接口文档
测试用例入参可以追加新字段，不要覆盖原有字段
接口文档有变更历史
可以提供下载接口文档的接口
可以指定类型的继承关系
可以解析proto反向生成json配置,根据类型自动添加默认值
生成的接口文件中有mock数据，已经生成的接口文件，如果有更新并且未修改过，则可以覆盖
支持指定json中的key_name， 如无指定，则按默认规则生成(json key_name为配置文件中的key值)
支持http url中path arg


#
有的项目并非请求应答的形式，而是只有请求无应答，如a->b   b处理完后再调用a的独立接口完成应答，这种情况双方都用异步通信即可
